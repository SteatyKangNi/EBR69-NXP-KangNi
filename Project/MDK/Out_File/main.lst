C251 COMPILER V5.60.0,  main                                                               25/05/22  21:42:56  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\Out_File\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE ..\USER\src\main.c XSMALL INTR2 WARNINGLEVEL(3) BROWSE INCDIR(..\..\Li
                    -braries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER\inc;..\USER\src
                    -) DEBUG PRINT(.\Out_File\main.lst) OBJECT(.\Out_File\main.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2020,逐飞科技
    4           * All rights reserved.
    5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
    6           *
    7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
    8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
    9           *
   10           * @file                main
   11           * @company                     成都逐飞科技有限公司
   12           * @author              逐飞科技(QQ790875685)
   13           * @version             查看doc内version文件 版本说明
   14           * @Software            MDK FOR C251 V5.60
   15           * @Target core         STC32G12K128
   16           * @Taobao              https://seekfree.taobao.com/
   17           * @date                2020-12-18
   18           ********************************************************************************************************
             -************/
   19          
   20          #include "headfile.h"
   21          
   22          
   23          /*
   24           *关于内核频率的设定，可以查看board.h文件
   25           *在board_init中,已经将P54引脚设置为复位
   26           *如果需要使用P54引脚,可以在board.c文件中的board_init()函数中删除SET_P54_RESRT即可
   27           */
   28           
   29          //该例程仅支持带方向的编码器解码
   30          
   31          //定义脉冲引脚
   32          #define SPEEDL_PLUSE   CTIM0_P34
   33          #define SPEEDR_PLUSE   CTIM3_P04
   34          //定义方向引脚
   35          #define SPEEDL_DIR     P35
   36          #define SPEEDR_DIR     P53
   37          
   38          #define DIR_1 P63
   39          #define DIR_2 P61
   40          #define PWM_1 PWMA_CH2P_P62
   41          #define PWM_2 PWMA_CH1P_P60
   42          
   43          int16 templ_pluse = 0;
   44          int16 tempr_pluse = 0;
   45          uint8  dir = 0;
   46          int16 dutyl = 2000;
   47          int16 dutyr = 2000;
   48          int16 spd_set = 1700;
   49          int16 errorr = 0;
   50          int16 errorl =  0;
   51          int16 errorr_last = 0;
   52          int16 errorl_last =  0;
   53          int16 errorr_i = 0;
   54          int16 errorl_i =  0;
   55          int16 errorr_d = 0;
C251 COMPILER V5.60.0,  main                                                               25/05/22  21:42:56  PAGE 2   

   56          int16 errorl_d =  0;
   57          uint8 data_to_send[20];
   58          uint16 adc_data[12];
   59          
   60          void main()
   61          {
   62   1          WTST = 0;               //设置程序代码等待参数，赋值为0可将CPU执行程序的速度设置为最快
   63   1          
   64   1              DisableGlobalIRQ();             //关闭总中断
   65   1              
   66   1          //sys_clk可选值:35000000，30000000, 27000000. 24000000, 22118400, 20000000, 18432000, 12000000, 11059
             -200, 6000000, 5529600。
   67   1          //设置系统频率，此频率需要跟STC-ISP软件中的 <输入用户程序运行的IRC频率>选项的频率一致。
   68   1          //如果频率设置不对，将会导致串口的数据不正常,PWM的工作不正常等等。
   69   1          sys_clk = 35000000;     //设置系统频率为35MHz
   70   1          
   71   1              board_init();           //初始化
   72   1              
   73   1              pwm_init(PWM_1, 17000, 0); //初始化PWM1  使用P60引脚  初始化频率为17Khz
   74   1              pwm_init(PWM_2, 17000, 0); //初始化PWM2  使用P62引脚  初始化频率为17Khz
   75   1          
   76   1              ctimer_count_init(SPEEDL_PLUSE);        //初始化定时器0作为外部计数
   77   1              ctimer_count_init(SPEEDR_PLUSE);        //初始化定时器3作为外部计数
   78   1      //      lcd_init();                                                     //1.8寸TFT初始化
   79   1              ips114_init();                                          //初始化1.14寸IPS屏幕
   80   1      //      oled_init_spi();                                        //OLED初始化
   81   1              adc_init(ADC_P01, ADC_SYSclk_DIV_2);    
   82   1          adc_init(ADC_P02, ADC_SYSclk_DIV_2);        
   83   1          adc_init(ADC_P03, ADC_SYSclk_DIV_2);
   84   1              adc_init(ADC_P04, ADC_SYSclk_DIV_2);    
   85   1          adc_init(ADC_P05, ADC_SYSclk_DIV_2);        
   86   1          adc_init(ADC_P06, ADC_SYSclk_DIV_2);                
   87   1              
   88   1              EnableGlobalIRQ();                                      //开启总中断
   89   1          while(1)
   90   1              {
   91   2              //读取采集到的编码器脉冲数
   92   2              templ_pluse = ctimer_count_read(SPEEDL_PLUSE);
   93   2                      tempr_pluse = ctimer_count_read(SPEEDR_PLUSE);
   94   2      
   95   2              //计数器清零
   96   2              ctimer_count_clean(SPEEDL_PLUSE);
   97   2                      ctimer_count_clean(SPEEDR_PLUSE);
   98   2      
   99   2                      
  100   2                      //在TFT上显示，需要初始化1.8寸TFT屏幕，才能使用。
  101   2      //              lcd_showstr(0, 0, "pluse_l =");                 lcd_showint16(8*10, 0, templ_pluse);
  102   2      //              lcd_showstr(0, 1, "pluse_r =");                 lcd_showint16(8*10, 1, tempr_pluse);
  103   2      
  104   2                      //在1.14IPS屏幕上显示，需要初始化1.14寸ips屏幕，才能使用。
  105   2                      // ips114_showstr(0, 0, "pluse_l =");           ips114_showint16(8*10, 0, templ_pluse);
  106   2                      // ips114_showstr(0, 1, "pluse_r =");           ips114_showint16(8*10, 1, tempr_pluse);
  107   2                      ips114_showint16(0,1, adc_data[0]);
  108   2                      ips114_showint16(8*10,1, adc_data[1]);
  109   2                      ips114_showint16(0,2, adc_data[2]);
  110   2                      ips114_showint16(8*10,2, adc_data[3]);
  111   2                      ips114_showint16(0,3, adc_data[4]);
  112   2                      ips114_showint16(8*10,3, adc_data[5]);
  113   2                      
  114   2                      //在OLED屏幕上显示，需要初始化OLED屏幕，才能使用。
  115   2      //              oled_p6x8str_spi(0, 0, "pluse_l =");    oled_int16_spi(8*10, 0, templ_pluse);
  116   2      //              oled_p6x8str_spi(0, 1, "pluse_r =");    oled_int16_spi(8*10, 1, tempr_pluse);、
  117   2                      //延时100ms
  118   2                      adc_data[0] = adc_once(ADC_P10, ADC_10BIT)/82;  //采集一次ADC，精度10位
  119   2                      adc_data[1] = adc_once(ADC_P11, ADC_10BIT)/82;  //采集一次ADC，精度10位
  120   2                      adc_data[2] = adc_once(ADC_P54, ADC_10BIT)/82;  //采集一次ADC，精度10位
C251 COMPILER V5.60.0,  main                                                               25/05/22  21:42:56  PAGE 3   

  121   2                      adc_data[3] = adc_once(ADC_P13, ADC_10BIT)/82;  //采集一次ADC，精度10位
  122   2                      adc_data[4] = adc_once(ADC_P14, ADC_10BIT)/82;  //采集一次ADC，精度10位
  123   2                      adc_data[5] = adc_once(ADC_P15, ADC_10BIT)/82;  //采集一次ADC，精度10位
  124   2                      delay_ms(100);
  125   2                      
  126   2                      // errorr_last = errorr;
  127   2              // errorl_last =  errorl;
  128   2                      // errorl = spd_set - templ_pluse;
  129   2                      // errorr = spd_set - tempr_pluse;
  130   2                      // errorl_i = errorl_i + errorl;
  131   2                      // errorr_i = errorr_i + errorr;
  132   2                      // errorr_d = errorr_last - errorr;
  133   2                      // errorl_d = errorl_last - errorl;
  134   2                      // dutyl = dutyl + 0.02*errorl + 0.001*errorl_i + 0.01*errorl_d;
  135   2                      // dutyr = dutyr + 0.02*errorr + 0.001*errorr_i + 0.01*errorr_d;
  136   2                      // DIR_1 = 0;
  137   2                      // pwm_duty(PWM_2, dutyl);
  138   2                      // DIR_2 = 0;
  139   2                      // pwm_duty(PWM_1, dutyr);
  140   2                      // ips114_showint16(0, 2, dutyl);
  141   2                      // ips114_showint16(0, 3, dutyr);
  142   2                  // printf("%d,%d\n",templ_pluse,tempr_pluse);
  143   2              }
  144   1      }
  145                                


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       375     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        71     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        83     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
